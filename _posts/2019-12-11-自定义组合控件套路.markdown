---
layout: post
title:  "自定义组合控件套路"
date:   2019-12-11 19:36:48 +0800
categories: Android
---

# [自定义组合控件套路]()

**栗子效果**

## Step 0
> 准备工作：想好你要组合的控件怎么样布局简单，尽量避免过度渲染

## Step 1
> 第一步：将组合的样子控件使用xml布局好

````xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@drawable/bg_events_press"
    android:orientation="horizontal">
    <ImageView
        android:id="@+id/item_left_icon"
        android:src="@mipmap/ic_launcher_round"
        android:layout_gravity="center_vertical"
        android:layout_marginLeft="10dp"
        android:layout_width="40dp"
        android:layout_height="40dp" />

    <LinearLayout
        android:layout_marginLeft="10dp"
        android:layout_marginRight="10dp"
        android:layout_width="0dp"
        android:layout_weight="1"
        android:layout_gravity="center_vertical"
        android:layout_height="wrap_content"
        android:orientation="vertical">
        <TextView
            android:text="item_title"
            android:id="@+id/item_title"
            android:textSize="20sp"
            android:textColor="@android:color/black"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" />
        <TextView
            android:text="item_subTitle"
            android:textColor="@android:color/darker_gray"
            android:id="@+id/item_sub_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" />
    </LinearLayout>

    <ImageView
        android:id="@+id/item_right_icon"
        android:src="@mipmap/ic_arrow_right"
        android:layout_gravity="center_vertical"
        android:layout_marginRight="10dp"
        android:layout_width="20dp"
        android:layout_height="20dp" />
</LinearLayout>
````

## Step 2
> 第二步：集成ViewGroup将xml中的内容填充到这个ViewGroup中。以便其他布局中可以直接调用

````java
public class MoreItemView extends FrameLayout {

    /** 左右图标是否可见 */
    private boolean isLeftVisibility, isRightVisibility;
    private String mTitle, mSubTitle;
    /** 左右图标资源文件 */
    private int mLeftSrcRid, mRightSrcRid;

    private ImageView mLeftView, mRightView;
    private TextView mTitleView, mSubTitleView;

    public MoreItemView(Context context) {
        this(context, null);
    }

    public MoreItemView(Context context, @Nullable AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public MoreItemView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        prepareAttributeSet(context, attrs);
        inflaterView(context);
        handlerData();
    }

    private void handlerData() {
        if(mLeftSrcRid > 0) { mLeftView.setImageResource(mLeftSrcRid); }
        if(mTitle != null) { mTitleView.setText(mTitle); }
        if(mSubTitle != null) { mSubTitleView.setText(mSubTitle); }
        if(mLeftSrcRid > 0) { mRightView.setImageResource(mRightSrcRid); }
        mLeftView.setVisibility(isLeftVisibility ? View.VISIBLE : View.GONE);
        mRightView.setVisibility(isRightVisibility ? View.VISIBLE : View.GONE);
    }

    private void prepareAttributeSet(Context context, AttributeSet attrs) {
        // 获取自定义属性
        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MoreItemView);
        mTitle = typedArray.getString(R.styleable.MoreItemView_title);
        mSubTitle = typedArray.getString(R.styleable.MoreItemView_subTitle);
        mLeftSrcRid = typedArray.getResourceId(R.styleable.MoreItemView_leftSrc, R.drawable.ic_launcher_background);
        mRightSrcRid = typedArray.getResourceId(R.styleable.MoreItemView_rightSrc, R.drawable.ic_launcher_background);
        isLeftVisibility = typedArray.getBoolean(R.styleable.MoreItemView_leftVisibility, false);
        isRightVisibility = typedArray.getBoolean(R.styleable.MoreItemView_rightVisibility, true);

        // 回收资源
        typedArray.recycle();
    }

    private void inflaterView(Context context) {
        // 将布局加载出来并填充到当前ViewGroup
        LayoutInflater.from(context).inflate(R.layout.view_more_item, this, true);
        mTitleView = findViewById(R.id.item_title);
        mSubTitleView = findViewById(R.id.item_sub_title);
        mLeftView = findViewById(R.id.item_left_icon);
        mRightView = findViewById(R.id.item_right_icon);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
    }
}
````

## Step 3
> 第三步：为了在xml中使用方便我们可以添加自定义属性，使用时可以直接在xml中给控件赋初值

- 在values文件夹下新建attrs.xml文件

> 注：format可选项

"reference" //引用 
"color" //颜色 
"boolean" //布尔值 
"dimension" //尺寸值 
"float" //浮点值 
"integer" //整型值 
"string" //字符串 
"fraction" //百分数,比如200% 

**枚举值，格式如下**：
````xml 
< attr name="orientation"> 
　　< enum name="horizontal" value="0" /> 
　　< enum name="vertical" value="1" /> 
< /attr> 
````
**xml中使用时**： 
````xml
android:orientation = "vertical"
````

**标志位，位或运算，格式如下：** 
````xml
< attr name="windowSoftInputMode"> 
	< flag name = "stateUnspecified" value = "0" /> 
	< flag name = "stateUnchanged" value = "1" /> 
	< flag name = "stateHidden" value = "2" /> 
	< flag name = "stateAlwaysHidden" value = "3" /> 
	< flag name = "stateVisible" value = "4" /> 
	< flag name = "stateAlwaysVisible" value = "5" /> 
	< flag name = "adjustUnspecified" value = "0x00" /> 
	< flag name = "adjustResize" value = "0x10" /> 
	< flag name = "adjustPan" value = "0x20" /> 
	< flag name = "adjustNothing" value = "0x30" /> 
< /attr> 
````

**xml中使用时：** 
````xml
android:windowSoftInputMode = "stateUnspecified | stateUnchanged　|　stateHidden">
````

**另外属性定义时可以指定多种类型值,比如： **
````xml
< attr name = "background" format = "reference|color" />
````

**xml中使用时：**
````xml 
android:background = "@drawable/图片ID|#00FF00"
````

**栗子**

````xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <declare-styleable name="MoreItemView">
        <attr name="leftSrc" format="reference" />
        <attr name="title" format="string" />
        <attr name="subTitle" format="string" />
        <attr name="rightSrc" format="reference" />
        <attr name="leftVisibility" format="boolean" />
        <attr name="rightVisibility" format="boolean" />
    </declare-styleable>
</resources>
````

## Step 4
> 第四步：在自定义View中取出自定义属性值

````java
private void prepareAttributeSet(Context context, AttributeSet attrs) {
    // 获取自定义属性
    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MoreItemView);
    mTitle = typedArray.getString(R.styleable.MoreItemView_title);
    mSubTitle = typedArray.getString(R.styleable.MoreItemView_subTitle);
    mLeftSrcRid = typedArray.getResourceId(R.styleable.MoreItemView_leftSrc, R.drawable.ic_launcher_background);
    mRightSrcRid = typedArray.getResourceId(R.styleable.MoreItemView_rightSrc, R.drawable.ic_launcher_background);
    isLeftVisibility = typedArray.getBoolean(R.styleable.MoreItemView_leftVisibility, false);
    isRightVisibility = typedArray.getBoolean(R.styleable.MoreItemView_rightVisibility, true);

    // 回收资源
    typedArray.recycle();
}
````

## Step 5
> 第五步：做完以上几步我们的自定义组合控件就可以使用了。使用时我们要在根标签中声明我们自己的命名空间，然后以该命名空间为前缀嗲用我们的属性值。

**声明命名空间**
命名空间名称可以随便取，比如app或abc，命名空间后面取得值是固定的："http://schemas.android.com/apk/res-auto"

````xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:showDividers="middle"
    android:dividerPadding="10dp"
    android:divider="@android:color/darker_gray"
    tools:context="com.thssh.ui.MainActivity">

    <com.thssh.ui.view.MoreItemView
        app:title="@string/title_lsn01"
        app:subTitle="@string/des_lsn01"
        android:onClick="lsn01Click"
        app:rightSrc="@mipmap/ic_arrow_right"
        android:layout_width="match_parent"
        android:layout_height="60dp" />

    <com.thssh.ui.view.MoreItemView
        app:title="@string/title_lsn02"
        app:subTitle="@string/des_lsn02"
        app:rightSrc="@mipmap/ic_arrow_right"
        android:onClick="lsn02Click"
        android:layout_width="match_parent"
        android:layout_height="60dp" />

</LinearLayout>
````

## 总结

自定义组合控件应该是自定义控件中最简单的了。不用measure, layout, draw。优点是简单，方便。最大的确定应该就是布局比较复杂时很容易造成过度绘制。所以使用时要注意。